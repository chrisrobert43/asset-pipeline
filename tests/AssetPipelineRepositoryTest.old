<?php

use Mockery as m;
use Codesleeve\AssetPipeline\AssetPipelineRepository;
use org\bovigo\vfs\vfsStream;
use org\bovigo\vfs\vfsStreamDirectory;
use org\bovigo\vfs\visitor\vfsStreamPrintVisitor;

class AssetPipelineRepositoryTest extends PHPUnit_Framework_TestCase
{
    /**
     * [setUp description]
     */
    public function setUp()
    {
        $this->rootPath = vfsStream::setup('root');

        mkdir($this->rootPath->url() . '/project/app/assets', 0755, true);

        $this->projectPath = $this->rootPath->getChild('project');
        $this->assetPath = $this->rootPath->getChild('project/app/assets');

        $this->mockJavascriptAssets();
        $this->mockStylesheetAssets();

        $config = [
            'assetPipeline::path' => 'app/assets',
            'assetPipeline::minify' => false,
            'assetPipeline::compressed' => ['.min.', '-min.'],
            'ignores' => ['/test/', '/tests/'],
        ];

        $this->configClosure = function($path) use ($config) {
            if (array_key_exists($path, $config)) {
                return $config[$path];
            }

            return $path; 
        };

        $this->pipeline = new AssetPipelineRepository($this->projectPath->url(), $this->configClosure);
    }

    /**
     * [mockJavascriptAssets description]
     * @return [type] [description]
     */
    public function mockJavascriptAssets()
    {
        $structure = [
            'javascripts' => [

            ]
        ];

        vfsStream::create($structure, $this->assetPath);
    }

    /**
     * [mockStylesheetAssets description]
     * @return [type] [description]
     */
    public function mockStylesheetAssets()
    {
        $structure = [
            'stylesheets' => [
                'styles1.css' => '.styles1 { color: red; }',
                'styles2.css' => '.styles2 { color: red; }',
                'styles3.css' => '.styles3 { color: red; }',
            ],
        ];

        vfsStream::create($structure, $this->assetPath);
    }

    /**
     * [tearDown description]
     * @return [type] [description]
     */
    public function tearDown()
    {
        m::close();
    }

    /**
     * @expectedException InvalidArgumentException
     */
    public function testCanHandleInvalidBaseDirectory()
    {
        $basePath = vfsStream::url('root/invalid_directory');
        $pipeline = new AssetPipelineRepository($basePath);
    }

    public function testCanCreateJavascript()
    {        
        print $this->pipeline->javascripts();
        //$this->inspectFileSystem();
    }

    private function inspectFileSystem()
    {
        $printVisitor = new vfsStreamPrintVisitor();
        vfsStream::inspect($printVisitor);
    }
}
